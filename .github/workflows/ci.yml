name: CI

on: [push, pull_request]

env:
  BUILD_TYPE: Release

jobs:
  build:
    strategy:
      matrix:
        config:
          - {name: "Linux", os: ubuntu-latest, cmakegen: "", llvm: "linux-gnu-ubuntu-20.04", llvm-ext: ".tar.xz", tc: "linux-ubuntu14", tc-ext: ".tar.gz", unpack: "tar xf"}
          #- {name: "Windows", os: windows-latest, cmakegen: "-G \"MinGW Makefiles\"", llvm: "", llvm-ext: "", tc: "w64-mingw32", tc-ext: ".zip", unpack: "unzip"}
          - {name: "Mac", os: macOS-latest, cmakegen: "", llvm: "apple-darwin", llvm-ext: ".tar.xz", tc: "apple-darwin", tc-ext: ".tar.gz", unpack: "tar xf"}

    runs-on: ${{ matrix.config.os }}
    name: ${{ matrix.config.name }}

    steps:
    - uses: actions/checkout@v2

    - name: Requirements (Linux)
      if: matrix.config.name == 'Linux'
      run: |
        sudo apt-get install libboost-system-dev libboost-filesystem-dev libboost-program-options-dev
    # - name: Requirements (Windows)
    #   if: matrix.config.name == 'Windows'
    #   shell: bash
    #   run: |
    #     choco install boost-msvc-14.1 --version=1.67.0
    #     choco install wget unzip
    #     choco install llvm --version=11.0.0
    - name: Requirements (Mac)
      if: matrix.config.name == 'Mac'
      run: |
        brew install boost coreutils
    - name: Requirements (Linux/Mac)
      if: matrix.config.name == 'Linux' || matrix.config.name == 'Mac'
      working-directory: ${{runner.workspace}}
      shell: bash
      run: |
        LLVM_NAME="clang+llvm-11.0.0-x86_64-${{ matrix.config.llvm }}"
        wget https://github.com/llvm/llvm-project/releases/download/llvmorg-11.0.0/$LLVM_NAME${{ matrix.config.llvm-ext }}
        ${{ matrix.config.unpack }} $LLVM_NAME${{ matrix.config.llvm-ext }}
        mv $LLVM_NAME llvm-lib
    - name: Requirements
      shell: bash
      working-directory: ${{runner.workspace}}
      run: |
        TC_NAME="riscv64-unknown-elf-gcc-8.3.0-2020.04.0-x86_64-${{ matrix.config.tc }}"
        wget https://static.dev.sifive.com/dev-tools/$TC_NAME${{ matrix.config.tc-ext }}
        ${{ matrix.config.unpack }} $TC_NAME${{ matrix.config.tc-ext }}
        mv $TC_NAME riscv-tc
    - name: Create Build Environment
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: |
        export LLVM_DIR=${{runner.workspace}}/llvm-lib
        cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_INSTALL_PREFIX=../install
    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: cmake --build . --config $BUILD_TYPE

    - name: Install
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: cmake --build . --config $BUILD_TYPE --target install

    - name: Setup tests
      working-directory: ${{runner.workspace}}/install/examples
      run: |
        cmake -E make_directory ${{runner.workspace}}/install/examples/SW/riscv/build
        cd SW/riscv/build
        cmake .. -DRISCV_ELF_GCC_PREFIX=../../../../../riscv-tc -DRISCV_ELF_GCC_BASENAME=riscv64-unknown-elf
        cmake --build . --config $BUILD_TYPE
        cd -
        cmake -E make_directory ${{runner.workspace}}/install/examples/SW/riscv/build64
        cd SW/riscv/build64
        cmake .. -DRISCV_ELF_GCC_PREFIX=../../../../../riscv-tc -DRISCV_ELF_GCC_BASENAME=riscv64-unknown-elf -DRISCV_ARCH=rv64gc -DRISCV_ABI=lp64d
        cmake --build . --config $BUILD_TYPE
        cd -
        cmake -E make_directory ${{runner.workspace}}/install/examples/SW/riscv_cpp/build
        cd SW/riscv_cpp/build
        cmake .. -DRISCV_ELF_GCC_PREFIX=../../../../../riscv-tc -DRISCV_ELF_GCC_BASENAME=riscv64-unknown-elf
        cmake --build . --config $BUILD_TYPE
        cd -
        cmake -E make_directory ${{runner.workspace}}/install/examples/SW/riscv_cpp/build64
        cd SW/riscv_cpp/build64
        cmake .. -DRISCV_ELF_GCC_PREFIX=../../../../../riscv-tc -DRISCV_ELF_GCC_BASENAME=riscv64-unknown-elf -DRISCV_ARCH=rv64gc -DRISCV_ABI=lp64d
        cmake --build . --config $BUILD_TYPE
        cd -
        cmake -E make_directory ${{runner.workspace}}/install/examples/SW/riscv_dhry/build
        cd SW/riscv_dhry/build
        cmake .. -DRISCV_ELF_GCC_PREFIX=../../../../../riscv-tc -DRISCV_ELF_GCC_BASENAME=riscv64-unknown-elf
        cmake --build . --config $BUILD_TYPE
        cd -
        cd bare_etiss_processor
        cmake -E make_directory ${{runner.workspace}}/install/examples/bare_etiss_processor/build
        cd build
        cmake ..
        cmake --build . --config $BUILD_TYPE


    - name: Test (Linux/Mac)
      working-directory: ${{runner.workspace}}/install/examples/bare_etiss_processor
      #if: matrix.config.name == 'Linux' || matrix.config.name == 'Mac'
      if: matrix.config.name == 'Linux'
      shell: bash
      run: |
        ./run_helper.sh ../SW/riscv/build/riscv_example
        ./run_helper.sh ../SW/riscv/build/riscv_example gcc
        ./run_helper.sh ../SW/riscv/build/riscv_example llvm
        ./run_helper.sh ../SW/riscv_cpp/build/riscv_example
        ./run_helper.sh ../SW/riscv_cpp/build/riscv_example gcc
        ./run_helper.sh ../SW/riscv_cpp/build/riscv_example llvm
        ./run_helper.sh ../SW/riscv/build64/riscv_example
        ./run_helper.sh ../SW/riscv/build64/riscv_example gcc
        ./run_helper.sh ../SW/riscv/build64/riscv_example llvm
        ./run_helper.sh ../SW/riscv_cpp/build64/riscv_example
        ./run_helper.sh ../SW/riscv_cpp/build64/riscv_example gcc
        ./run_helper.sh ../SW/riscv_cpp/build64/riscv_example llvm
        ./run_helper.sh ../SW/riscv_dhry/build/riscv_example
        ./run_helper.sh ../SW/riscv_dhry/build/riscv_example gcc
        ./run_helper.sh ../SW/riscv_dhry/build/riscv_example llvm







  benchmark:
    strategy:
      matrix:
        run-no: [1, 2, 3, 4, 5]
        jit-engine: ["tcc", "gcc", "llvm"]

    needs: build
    runs-on: ubuntu-latest

    steps:

    - name: Run Benchmarks
      working-directory: ${{runner.workspace}}/install/examples/bare_etiss_processor
      run: |
        ./run_helper.sh ../SW/riscv_dhry/build/riscv_example ${{matrix.jit-engine}}
        mv run_results.json run_results_${{matrix.jit-engine}}_${{matrix.run-no}}.json

    - name: Save Benchmark Results
      uses: actions/upload-artifact@v2
      with:
        name: run_results_${{matrix.jit-engine}}_${{matrix.run-no}}.json
        path: ${{runner.workspace}}/install/examples/bare_etiss_processor/run_results_${{matrix.jit-engine}}_${{matrix.run-no}}.json

  avergae_tcc:


    needs: build
    runs on: ubuntu-latest


    steps:
      -uses: actions/checkout@v2

      -name: get file_one
        uses: actions/checkout@v2
        with:
          path: ${{runner.workspace}}/install/examples/bare_etiss_processor/run_results_tcc_1.json

      -name: get file_two
        uses: actions/checkout@v2
        with:
          path: ${{runner.workspace}}/install/examples/bare_etiss_processor/run_results_tcc_2.json

      -name: get file_three
        uses: actions/checkout@v2
        with:
          path: ${{runner.workspace}}/install/examples/bare_etiss_processor/run_results_tcc_3.json

      -name: get file_four
        uses: actions/checkout@v2
        with:
          path: ${{runner.workspace}}/install/examples/bare_etiss_processor/run_results_tcc_4.json

      -name: get file_five
        uses: actions/checkout@v2
        with:
          path: ${{runner.workspace}}/install/examples/bare_etiss_processor/run_results_tcc_5.json

      -name: store files
        run: rm -rf json_file_one
            mkdir json_file_one
            cp run_results_tcc_1.json json_file_one
            rm -rf json_file_two
            mkdir json_file_two
            cp run_results_tcc_2.json json_file_two
            rm -rf json_file_three
            mkdir json_file_three
            cp run_results_tcc_3.json json_file_three
            rm -rf json_file_four
            mkdir json_file_four
            cp run_results_tcc_4.json json_file_four
            rm -rf json_file_five
            mkdir json_file_five
            cp run_results_tcc_5.json json_file_five

      -name: averaging out
        run: python3 script/average.py json_file_one/run_results_tcc_1.json json_file_two/run_results_tcc_2.json json_file_three/run_results_tcc_3.json json_file_four/run_results_tcc_4.json json_file_five/run_results_tcc_5.json
            rm ${{runner.workspace}}/install/examples/bare_etiss_processor/run_results_tcc_5.json
            cp json_file_five/run_results_tcc_5.json ${{runner.workspace}}/install/examples/bare_etiss_processor/run_results_tcc_5.json
            mv run_results_tcc_5.json run_results.json




 compare:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: get old benchmark results
        uses: actions/checkout@v2
        with:
          ref: benchmark_results
          path: benchmark_results_old

      - name: install dependencies
        run: pip install -r script/compare_mips/requirements.txt

      - name: Get new benchmark results
        uses: actions/download-artifact@v2
        with:
          name: benchmark_results

      - name: Save benchmark results
        run: |
          rm -rf benchmark_results_new
          mkdir benchmark_results_new
          cp run_results.json benchmark_results_new/
      - name: Run comparison (Push)
        if: ${{github.event_name == 'push'}}
        run: python3 script/compare_mips/compare.py benchmark_results_new/run_results.json benchmark_results_old/run_results.json ${{ github.sha }}

      - name: Run comparison (PR)
        if: ${{github.event_name == 'pull_request'}}
        run: python3 script/compare_mips/compare.py benchmark_results_new/run_results.json benchmark_results_old/run_results.json ${{ github.event.pull_request.head.sha }}

      - name: Deploy results to git
        if: ${{github.event_name == 'push'}}
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./benchmark_results_new
          publish_branch: benchmark_results
          enable_jekyll: true

      - name: Upload comment text
        uses: actions/upload-artifact@v2
        with:
          name: mips_issue_text.md

          path: mips_issue_text.md

  display-push:
    needs: compare
    runs-on: ubuntu-latest
    if: ${{github.event_name == 'push'}}

    steps:
      - name: Get comment text
        uses: actions/download-artifact@v2
        with:
          name: mips_issue_text.md

      - name: Load comment body
        id: get-comment-body
        run: |
          body=$(cat mips_issue_text.md)
          body="${body//'%'/'%25'}"
          body="${body//$'\n'/'%0A'}"
          body="${body//$'\r'/'%0D'}"
          echo ::set-output name=body::$body
      - name: Find Comment
        uses: peter-evans/find-comment@v1
        id: fc
        with:
          issue-number: 4

          body-includes: This comment was created automatically, please do not change!

      - name: Create comment
        if: ${{ steps.fc.outputs.comment-id == 0 }}
        uses: peter-evans/create-or-update-comment@v1
        with:
          issue-number: 4
          edit-mode: replace
          body: ${{ steps.get-comment-body.outputs.body }}

      - name: Update comment
        if: ${{ steps.fc.outputs.comment-id != 0 }}
        uses: peter-evans/create-or-update-comment@v1
        with:
          comment-id: ${{ steps.fc.outputs.comment-id }}
          edit-mode: replace
          body: ${{ steps.get-comment-body.outputs.body }}

  display-pr:
    needs: compare
    runs-on: ubuntu-latest
    if: ${{github.event_name == 'pull_request'}}

    steps:
      - name: Get comment text
        uses: actions/download-artifact@v2
        with:
          name: mips_issue_text.md

      - name: Load comment body
        id: get-comment-body
        run: |
          body=$(cat mips_issue_text.md)
          body="${body//'%'/'%25'}"
          body="${body//$'\n'/'%0A'}"
          body="${body//$'\r'/'%0D'}"
          echo ::set-output name=body::$body
      - name: Find Comment
        uses: peter-evans/find-comment@v1
        id: fc
        with:
          issue-number: ${{github.event.number}}
          body-includes: This comment was created automatically, please do not change!

      - name: Create comment
        if: ${{ steps.fc.outputs.comment-id == 0 }}
        uses: peter-evans/create-or-update-comment@v1
        with:
          issue-number: ${{github.event.number}}
          edit-mode: replace
          body: ${{ steps.get-comment-body.outputs.body }}

      - name: Update comment
        if: ${{ steps.fc.outputs.comment-id != 0 }}
        uses: peter-evans/create-or-update-comment@v1
        with:
          comment-id: ${{ steps.fc.outputs.comment-id }}
          edit-mode: replace
          body: ${{ steps.get-comment-body.outputs.body }}


